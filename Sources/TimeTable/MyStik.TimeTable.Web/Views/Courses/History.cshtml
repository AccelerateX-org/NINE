@model MyStik.TimeTable.Web.Models.TeachingOverviewModel
@using System.Text
@using MyStik.TimeTable.Data
@using MyStik.TimeTable.DataServices
@using MyStik.TimeTable.Web.Helpers
@using MyStik.TimeTable.Web.Services

@{
    ViewBag.Title = "Verantwortungsbereich";


    var semester = Model.CurrentSemester.Semester;
    var member = Model.Members.First();

    var db = new TimeTableDbContext();

    var catalogs = db.CurriculumModuleCatalogs.Where(x => x.CatalogResponsibilities.Any(r => r.Member.UserId.Equals(member.UserId))).ToList();

    var modules = db.CurriculumModules.Where(x => x.ModuleResponsibilities.Any(r => r.Member.UserId.Equals(member.UserId))).ToList();

    var dozCourses = db.Activities.OfType<Course>().Where(x => x.Semester.Id == semester.Id && x.Dates.Any(d => d.Hosts.Any(h => h.UserId.Equals(member.UserId)))).ToList();

    foreach (var catalog in catalogs)
    {
        foreach (var module in catalog.Modules.ToList())
        {
            var m = modules.FirstOrDefault(x => x.Id == module.Id);
            if (m == null)
            {
                modules.Add(module);
            }

            foreach (var subject in module.ModuleSubjects)
            {
                var courses = subject.SubjectTeachings.Where(x => x.Course.Semester.Id == semester.Id && x.Course.Organiser.Id == member.Organiser.Id).Select(x => x.Course).ToList();
                foreach (var course in courses)
                {
                    // ist das einer meiner Kurse
                    var c = dozCourses.FirstOrDefault(x => x.Id == course.Id);
                    if (c != null)
                    {
                        dozCourses.Remove(c);
                    }
                }
            }
        }
    }

    var semesterService = new SemesterService();
    var todaySemester = semesterService.GetSemester(DateTime.Today);
    var planingSemester = semesterService.GetNextSemester(todaySemester);
    var courseSemester = Model.CurrentSemester.Semester;

    var prevSemester = semesterService.GetPreviousSemester(courseSemester);
    var nextSemester = semesterService.GetNextSemester(courseSemester);

    var courseService = new CourseService();

}

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">
                    Alle Lehrveranstaltungen im @Model.CurrentSemester.Semester.Name, auf die ich inden Rollen Katalogverantwortung, Modulverantwortung oder Dozent:in Zugriff habe
                </h5>
            </div>
            <div class="list-group">
                <div class="list-group-item">
                    <div class="btn-group">
                        <a href="@Url.Action("Responsibility", "Courses", new {id = prevSemester.Id})" class="btn btn-outline-primary"><< @prevSemester.Name</a>
                        <a href="@Url.Action("Responsibility", "Courses", new {id = nextSemester.Id})" class="btn btn-outline-primary">>> @nextSemester.Name</a>
                    </div>
                </div>
            </div>
            <table class="table table-striped">
                <theed>
                    <tr>
                        <th>Katalog-ID</th>
                        <th>Modul-ID</th>
                        <th>Modul</th>
                        <th>Kurse</th>
                        <th></th>
                    </tr>
                </theed>
                <tbody>
                    @foreach (var module in modules)
                    {
                        foreach (var subject in module.ModuleSubjects)
                        {
                            var courses = subject.SubjectTeachings.Where(x => x.Course.Semester.Id == semester.Id && x.Course.Organiser.Id == member.Organiser.Id).Select(x => x.Course).ToList();

                            <tr>
                                <td>@module.Catalog.Tag</td>
                                <td>@module.Tag</td>
                                <td>@module.Name</td>
                                <td>
                                    @foreach (var course in courses)
                                    {
                                        var summary = courseService.GetCourseSummary(course);

                                        var sb = new StringBuilder();
                                        foreach (var accr in subject.SubjectAccreditations)
                                        {
                                            sb.AppendFormat("{0} {1} | ", accr.Slot.AreaOption.Area.Curriculum.ShortName, accr.Slot.Tag);
                                        }

                                        if (module.ModuleSubjects.Count > 1)
                                        {
                                            <div>
                                                @sb.ToString() (@subject.Name):
                                                <a href="@Url.Action("Details", "Course", new {id = course.Id})">@course.ShortName @course.Name</a> | @Html.LecturerList(summary.Lecturers)
                                            </div>
                                        }
                                        else
                                        {
                                            <div>
                                                @sb.ToString():
                                                <a href="@Url.Action("Details", "Course", new {id = course.Id})">@course.ShortName @course.Name</a> | @Html.LecturerList(summary.Lecturers)
                                            </div>
                                        }
                                    }
                                </td>
                                <td>
                                    <div class="dropdown">
                                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            Planungsaktion
                                        </button>
                                        <ul class="dropdown-menu">
                                            @if (courseSemester.StartCourses < todaySemester.StartCourses)
                                            {
                                                // das Semester des Kurses liegt in der Vergangenheit
                                                // ins tagesaktuelle Semester kopieren
                                                <li><a class="dropdown-item" href="@Url.Action("Copy", "CurriculumModule", new { moduleId = module.Id, sourceSemId = courseSemester.Id, destSemId = todaySemester.Id, backSemId = courseSemester.Id })">ins aktuelle Semester <strong>@todaySemester.Name</strong> kopieren</a></li>
                                                // ins planungssemester kopieren
                                                <li><a class="dropdown-item" href="@Url.Action("Copy", "CurriculumModule", new { moduleId = module.Id, sourceSemId = courseSemester.Id, destSemId = planingSemester.Id, backSemId = courseSemester.Id })">ins Planungssemester <strong>@planingSemester.Name</strong> kopieren</a></li>
                                            }
                                            else if (courseSemester.StartCourses > todaySemester.StartCourses)
                                            {
                                                // das Semester des Kurses liegt in der Zukunft
                                                // ins planungssemester kopieren
                                                <li><a class="dropdown-item" href="@Url.Action("Copy", "CurriculumModule", new { moduleId = module.Id, sourceSemId = courseSemester.Id, destSemId = planingSemester.Id, backSemId = courseSemester.Id })">ins Planungssemester <strong>@planingSemester.Name</strong> kopieren</a></li>
                                            }
                                            else
                                            {
                                                // das Semester des Kurses ist das tagesaktuelle Semeater
                                                // im aktuellen Semester kopieren
                                                <li><a class="dropdown-item" href="@Url.Action("Copy", "CurriculumModule", new { moduleId = module.Id, sourceSemId = courseSemester.Id, destSemId = todaySemester.Id, backSemId = courseSemester.Id })">Eine Kopie für das aktuelle Semester <strong>@todaySemester.Name</strong> erstellen</a></li>
                                                // ins planungssemester kopieren
                                                <li><a class="dropdown-item" href="@Url.Action("Copy", "CurriculumModule", new { moduleId = module.Id, sourceSemId = courseSemester.Id, destSemId = planingSemester.Id, backSemId = courseSemester.Id })">ins Planungssemester <strong>@planingSemester.Name</strong> kopieren</a></li>
                                            }
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
            @*
            <div class="list-group-item">Rolle Dozentin oder Dozent, wo ich weder Modul- noch Katalogverantwortung habe (hier wurde ich eingeteilt)
                <ul>
                    @foreach (var c in dozCourses)
                    {
                        <li>@c.ShortName: @c.Name</li>
                    }
                </ul>
                </div>
            <div class="list-group-item">
                Rolle Modulverantwortung, da wo ich nicht Katalogverantwortung habe
                <ul>
                @foreach (var m in modules)
                {
                    <li>@m.Name
                        <ul>
                            @foreach (var subject in m.ModuleSubjects)
                            {
                                var courses = subject.SubjectTeachings.Where(x => x.Course.Semester.Id == semester.Id && x.Course.Organiser.Id == member.Organiser.Id).Select(x => x.Course).ToList();
                                <li>@subject.Name
                                    <ul>
                                        @foreach (var c in courses)
                                        {
                                            <li>@c.ShortName: @c.Name</li>
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    </li>
                }
                </ul>
            </div>
            <div class="list-group-item">Rolle Katalogverantwortung - hier sehe ich alle LVs dieses Katalogs</div>
        </div>
            *@
        </div>
    </div>
</div>

