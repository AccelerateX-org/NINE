@using MyStik.TimeTable.Web.Models
@using MyStik.TimeTable.Web.Services
@model MyStik.TimeTable.Web.Models.ThesisStateModel
@{
    ViewBag.Title = "Abschlussarbeit";

    var userService = new UserInfoService();

    var pk = Model.Student.Curriculum.Organiser.Autonomy != null ?
        Model.Student.Curriculum.Organiser.Autonomy.Committees.FirstOrDefault(x => x.Name.Equals("PK")&&
                                                                                   x.Curriculum != null && 
                                                                                   x.Curriculum.Id == Model.Student.Curriculum.Id) : null;
}

<div class="row">
<div class="col-md-12">
<div class="card">
<div class="card-header">
    <h4>Meine Abschlussarbeit im Studiengang @Model.Student.Curriculum.ShortName</h4>
</div>
<div class="list-group">
<div class="list-group-item list-group-item-info">
    <h5>Wichtiger Hinweis:</h5>
    <p>Auf dieser Seite kann ich den Ablauf meiner Arbeit planen. Es beinhaltet eine Checkliste der wichtigsten Aktivitäten und soll den organisatorischen Ablauf für alle Beteiligten vereinfachen.</p>
    <p>Im Zweifel ist unverzüglich mit dem Prüfungsamt und/oder der Prüfungskommission Kontakt aufzunehmen. Entsprechende Informationen finden sich auf der Webseite der Hochschule.</p>
</div>
@{
    var isNameOk = !string.IsNullOrEmpty(Model.User.FirstName) && !string.IsNullOrEmpty(Model.User.LastName);
    var isStudOk = !string.IsNullOrEmpty(Model.Student.Number);

    var isOk = isNameOk && isStudOk;

    var mediaStyle = isOk ? "fa-check text-success" : "fa-exclamation-triangle text-danger";
}
<div class="list-group-item">
    <h4><i class="fas @mediaStyle"></i> Allgemeine Angaben</h4>
    <ul class="fa-ul">
        @if (isNameOk)
        {
            <li><i class="fa fa-user fa-li"></i>@Model.User.FullName 
                <a href="@Url.Action("Index", "UserProfile")" class="btn btn-outline-primary btn-sm">ändern</a>
            </li>

        }
        else
        {
            <li><i class="fa fa-user fa-li"></i><a href="@Url.Action("Index", "UserProfile")" class="btn btn-outline-danger btn-sm">ergänzen</a></li>
        }
        @if (isStudOk)
        {
            <li><i class="fa fa-barcode fa-li"></i>Matrikelnummer: @Model.Student.Number <a href="@Url.Action("ChangeNumber", "Subscription", new {id=Model.Student.Id})" class="btn btn-outline-primary btn-sm">ändern</a></li>
        }
        else
        {
            <li><i class="fa fa-barcode fa-li"></i>Matrikelnummer fehlt <a href="@Url.Action("ChangeNumber", "Subscription", new {id=Model.Student.Id})" class="btn btn-outline-danger btn-sm">ergänzen</a></li>
        }
        <li><i class="fa fa-graduation-cap fa-li"></i>Studiengang: @Model.Student.Curriculum.Name (@Model.Student.Curriculum.ShortName)</li>
    </ul>
    @if (pk != null)
    {
        <div class="alert alert-info"> <strong>Prüfungskommission:</strong>
            <ul>
                @foreach (var p in pk.Members.Where(x => x.HasChair))
                {
                    <li>@p.Member.FullName</li>
                }
            </ul>
        </div>
    }
</div>


@{
    isOk = Model.ConditionRequest == RequestState.InProgress || Model.ConditionRequest == RequestState.Accepted;

    mediaStyle = isOk ? "fa-check text-success" : "fa-exclamation-triangle text-danger";
}

<div class="list-group-item">
            <h4><i class="fas @mediaStyle"></i> Voraussetzungen prüfen</h4>
            @if (Model.ConditionRequest == RequestState.None)
            {
                <p>Durch einen Blick in primuss kann ich erkennen, ob ich die Voraussetzungen erfüllt habe. Wenn ich das erledigt habe, dann kann ich mit der Planung meiner Abschlussarbeit beginnen.</p>
                                    @*<a href="@Url.Action("Request")" class="btn btn-primary">Voraussetzungen prüfen lassen</a>*@
                <a href="@Url.Action("Check")" class="btn btn-primary">Ich habe die Voraussetzungen erfüllt</a>
            }
            else if (Model.ConditionRequest == RequestState.InProgress)
            {
                <ul class="fa-ul">
                    <li><i class="fa fa-li fa-calendar"></i>Habe am @Model.Thesis.RequestDate bestätigt, dass ich die Voraussetzungen erfüllt habe.</li>
                </ul>
            }
            else if (Model.ConditionRequest == RequestState.Accepted)
            {
                if (Model.Thesis.RequestAuthority != null)
                {
                    <ul class="fa-ul">
                        <li><i class="fa fa-li fa-calendar"></i>Habe am @Model.Thesis.RequestDate bestätigt, dass ich die Voraussetzungen erfüllt habe.</li>
                        <li><i class="fa fa-li fa-calendar-check-o"></i>Ich habe die Voraussetzungen erfüllt (bestätigt am @Model.Thesis.RequestDate.Value.ToShortDateString() von @Model.Thesis.RequestAuthority.FullName)</li>
                    </ul>
                }
                else
                {
                    <p>Habe die Prüfung der Voraussetzungen selbst durchgeführt.</p>
                }

            }
            else if (Model.ConditionRequest == RequestState.Rejected)
            {
                <ul class="fa-ul">
                    <li><i class="fa fa-li fa-calendar"></i>Habe am @Model.Thesis.RequestDate bestätigt, dass ich die Voraussetzungen erfüllt habe.</li>
                    <li><i class="fa fa-li fa-calendar-times-o"></i>Der Antrag wurde abgelehnt (am @Model.Thesis.ResponseDate.Value.ToShortDateString() von @Model.Thesis.RequestAuthority.FullName)</li>
                    <li><i class="fa fa-li fa-ban text-danger"></i>Es fehlt die folgende(n) Voraussetzung(en): @Model.Thesis.RequestMessage</li>
                </ul>
                <a href="@Url.Action("Check")" class="btn btn-primary">Ich habe die Voraussetzungen jetzt erfüllt</a>
            }


</div>

@if (Model.Thesis != null)
{

    isOk = !string.IsNullOrEmpty(Model.Thesis.TitleDe) && !string.IsNullOrEmpty(Model.Thesis.TitleEn);

    mediaStyle = isOk ? "fa-check text-success" : "fa-exclamation-triangle text-danger";

    <div class="list-group-item">
        <h4><i class="fas @mediaStyle"></i> Thema festlegen</h4>
        <ul class="fa-ul">
            <li><i class="fa fa-file-text-o fa-li"></i>de: "@Model.Thesis.TitleDe" </li>
            <li><i class="fa fa-file-text-o fa-li"></i>en: "@Model.Thesis.TitleEn" </li>
        </ul>
        @if (Model.Thesis.DeliveryDate == null)
        {
            <a href="@Url.Action("ChangeTitle", new {id = Model.Thesis.Id})" class="btn btn-outline-primary">Thema festlegen / ändern</a>
        }
    </div>


    isOk = Model.Thesis.PlannedBegin != null &&
           Model.Thesis.PlannedEnd != null;

    mediaStyle = isOk ? "fa-check text-success" : "fa-exclamation-triangle text-danger";

    <div class="list-group-item">
        <h4><i class="fas @mediaStyle"></i> Geplanten Bearbeitungszeitraum festlegen</h4>
        <p>Der geplante Zeitraum dient ausschließlich zur Information im Zuge der Anfrage zur Betreuung der Arbeit. Dieser Zeitraum hat keine rechtliche Verbindlichkeit. Dies erfolgt erst durch die Anmeldung.</p>
        <p>Nach der Anmeldung kann der geplante Bearbeitungszeitraum nicht mehr verändert werden.</p>
        @if (Model.Thesis.PlannedBegin != null && Model.Thesis.PlannedEnd != null && Model.Thesis.LastPlanChange != null)
        {
            <ul class="fa-ul">
                <li><i class="fa fa-calendar fa-li"></i>geplanter Beginn: @Model.Thesis.PlannedBegin.Value.ToShortDateString() </li>
                <li><i class="fa fa-calendar fa-li"></i>geplantes Abgabedatum: @Model.Thesis.PlannedEnd.Value.ToShortDateString()</li>
            </ul>
        }
        else
        {
            <p>Bisher wurde noch kein geplanter Zeitraum festgelegt</p>
        }
        @if (Model.Thesis.IssueDate == null)
        {
            <a href="@Url.Action("Plan", new {id = Model.Thesis.Id})" class="btn btn-outline-primary">Zeitraum festlegen / ändern</a>
        }
    </div>


    isOk = Model.Thesis.Advisors.Any();
    var advisor = Model.Thesis.Advisors.FirstOrDefault();

    mediaStyle = isOk ? "fa-check text-success" : "fa-info-circle text-primary";


    <div class="list-group-item">
        <h4><i class="fas @mediaStyle"></i> BetreuerIn im Unternehmen angeben</h4>
        @if (advisor != null)
        {
            <p>Aktuelle Angaben</p>
            <ul class="fa-ul">
                <li><i class="fa fa-industry fa-li"></i>@advisor.PersonFirstName @advisor.PersonLastName</li>
                <li><i class="fa fa-user fa-li"></i>@advisor.CorporateName - @advisor.PersonAction</li>
                <li><i class="fa fa-envelope fa-li"></i>@advisor.PersonEMail</li>
                <li><i class="fa fa-phone fa-li"></i>@advisor.PersonPhone</li>
            </ul>

            <a href="@Url.Action("Advisor", new {id=Model.Thesis.Id})" class="btn btn-outline-primary">BetreuerIn angeben</a>
        }
        else
        {
            if (Model.Thesis.DeliveryDate == null)
            {
                <p>Nur bei Arbeiten im Unternehmen erforderlich</p>
                if (!isOk)
                {
                    <a href="@Url.Action("Advisor", new {id = Model.Thesis.Id})" class="btn btn-outline-primary">BetreuerIn angeben</a>
                }
            }
            else
            {
                <p>Nur bei Arbeiten im Unternehmen erforderlich</p>
            }
        }
    </div>


    var canSearch = !string.IsNullOrEmpty(Model.Thesis.TitleDe) &&
                    !string.IsNullOrEmpty(Model.Thesis.TitleEn) &&
                    Model.Thesis.PlannedBegin != null &&
                    Model.Thesis.PlannedEnd != null;


    isOk = Model.Thesis.Supervisors.Any(x => x.AcceptanceDate != null);

    mediaStyle = isOk ? "fa-check text-success" : "fa-exclamation-triangle text-danger";


    <div class="list-group-item">
        <h4><i class="fas @mediaStyle"></i> Anfrage Betreuung</h4>
        @if (canSearch)
        {
            <ul class="fa-ul">
                @foreach (var s in Model.Thesis.Supervisors)
                {

                    var supUser = userService.GetUser(s.Member.UserId);

                    if (s.AcceptanceDate != null)
                    {
                        <li>
                            <i class="fa fa-user-md fa-li"></i>@s.Member.FullName (zugesagt am: @s.AcceptanceDate.Value.ToShortDateString())
                            @if (supUser != null)
                            {
                                <a href="mailto:@supUser.Email" class="btn btn-outline-primary btn-sm">Mail senden</a>
                            }
                        </li>
                    }
                    else
                    {
                        <li>
                            <i class="fa fa-user-md fa-li"></i>@s.Member.FullName (@s.Member.Organiser.ShortName) (keine Antwort) 
                            <a href="@Url.Action("RemoveSupervisor", new {id = s.Id})" class="btn btn-outline-primary btn-sm">absagen</a>
                            @if (supUser != null)
                            {
                                <a href="mailto:@supUser.Email" class="btn btn-outline-primary btn-sm">Mail senden</a>
                            }
                        </li>
                    }

                }
            </ul>
            if (!isOk)
            {
                <a href="@Url.Action("RequestSupervision", new {id = Model.Thesis.Id})" class="btn btn-outline-primary">Anfrage absenden</a>
            }
        }
        else
        {
            <p>Für die Suche nach Betreuenden fehlen folgende Voraussetzungen</p>
            <ul>
                @if (string.IsNullOrEmpty(Model.Thesis.TitleDe))
                {
                    <li>Kein Thema (deutsch) angegeben</li>
                }
                @if (string.IsNullOrEmpty(Model.Thesis.TitleEn))
                {
                    <li>Kein Thema (englisch) angegeben</li>
                }
                @if (Model.Thesis.PlannedBegin == null)
                {
                    <li>Kein geplanter Bearbeitungszeitraum angegeben</li>
                }
            </ul>
        }
    </div>


    // Ausgegeben
    var isIssued = Model.Thesis.IssueDate != null;
    var daysToExpiry = 0;
    var hasSupervisor = Model.Thesis.Supervisors.Any(x => x.AcceptanceDate != null);
    var hasTitle = !string.IsNullOrEmpty(Model.Thesis.TitleDe) && !string.IsNullOrEmpty(Model.Thesis.TitleEn);

    if (Model.Thesis.GradeDate != null)
    {
        mediaStyle = "fa-check text-success";
    }
    else
    {
        if (isIssued)
        {
            var diff = Model.Thesis.ExpirationDate.Value.Date - DateTime.Today;
            daysToExpiry = diff.Days;
            if (daysToExpiry <= 14)
            {
                mediaStyle = "fa-exclamation-triangle text-danger";
            }
            else
            {
                mediaStyle = "fa-cog";
            }
        }
        else
        {
            mediaStyle = "fa-exclamation-triangle text-danger";
        }
    }


    <div class="list-group-item">
        @if (isIssued)
        {
            <h4><i class="fas @mediaStyle"></i> Arbeit angemeldet</h4>
            if (Model.Thesis.DeliveryDate == null)
            {
                <ul class="fa-ul">
                    <li><i class="fa fa-calendar fa-li"></i>Angemeldet am: @Model.Thesis.IssueDate.Value.Date.ToShortDateString()</li>
                    @if (Model.Thesis.RenewalDate != null)
                    {
                        <li><i class="fa fa-calendar fa-li"></i>Ursprüngliche Abgabe bis: @Model.Thesis.ExpirationDate.Value.Date.ToShortDateString()</li>
                        <li><i class="fa fa-calendar fa-li"></i>Verlängerung bis: @Model.Thesis.RenewalDate.Value.Date.ToShortDateString()</li>
                    }
                    else
                    {
                        <li><i class="fa fa-calendar fa-li"></i>Abgabe bis: @Model.Thesis.ExpirationDate.Value.Date.ToShortDateString()</li>
                        <li><i class="fa fa-li fa-cog"></i>Noch @daysToExpiry Tage bis zur Abgabe</li>


                        if (Model.Thesis.ProlongRequestDate != null)
                        {
                            if (Model.Thesis.ProlongSupervisorAccepted == null)
                            {
                                <li><i class="fa fa-li fa-cog"></i>Antrag auf Verlängerung ist gestellt. Wunschtermin: @Model.Thesis.ProlongExtensionDate.Value.ToShortDateString()</li>
                            }
                            else
                            {
                                if (Model.Thesis.ProlongSupervisorAccepted.Value == false)
                                {
                                    <li><i class="fa fa-li fa-cog"></i>Antrag auf Verlängerung wurde seitens der Betreuenden abgelehnt.</li>
                                }
                                if (Model.Thesis.ProlongExaminationBoardAccepted.HasValue && Model.Thesis.ProlongExaminationBoardAccepted.Value == false)
                                {
                                    <li><i class="fa fa-li fa-cog"></i>Antrag auf Verlängerung wurde seitens der PK abgelehnt.</li>
                                }

                            }
                        }
                    }
                </ul>

                if (Model.Thesis.RenewalDate != null ||
                    (Model.Thesis.ProlongSupervisorAccepted.HasValue && Model.Thesis.ProlongSupervisorAccepted.Value == false) ||
                    (Model.Thesis.ProlongExaminationBoardAccepted.HasValue && Model.Thesis.ProlongExaminationBoardAccepted.Value == false))
                {
                    <a class="btn btn-outline-danger" href="@Url.Action("ProlongAgain", "Thesis")">Weitere Verlängerung beantragen</a>
                }

                if (Model.Thesis.RenewalDate == null && Model.Thesis.ProlongRequestDate == null)
                {
                    if (Model.Thesis.PlannedBegin.HasValue && Model.Thesis.PlannedBegin.Value > DateTime.Today &&
                        Model.Thesis.IssueDate.HasValue && Model.Thesis.IssueDate.Value < Model.Thesis.PlannedBegin.Value)
                    {
                        <a class="btn btn-outline-danger" href="@Url.Action("MoveIssue", "Thesis")">
                            Anmeldung auf geplanten Beginn verschieben
                        </a>
                    }


                    if (Model.Thesis.IssueDate.HasValue && Model.Thesis.IssueDate.Value <= DateTime.Today)
                    {
                        <a class="btn btn-outline-danger" href="@Url.Action("Prolong", "Thesis")">
                            Verlängerung beantragen
                        </a>
                    }


                    if (pk != null)
                    {
                        <div class="alert alert-info">
                            <strong>Prüfungskommission:</strong>
                            <ul>
                                @foreach (var p in pk.Members.Where(x => x.HasChair))
                                {
                                    <li>@p.Member.FullName</li>
                                }
                            </ul>
                        </div>

                    }
                    if (daysToExpiry > 13)
                    {
                        <div class="alert alert-info"><strong>Wichtiger Hinweis:</strong> nach ASPO muss eine Verlängerung bis spätestens 14 Tage vor Abgabefrist beantragt werden.</div>
                    }
                    else
                    {
                        <div class="alert alert-danger"><strong>Wichtiger Hinweis:</strong> Die offizielle Frist zur Beantragung einer Verlängerung ist abgelaufen.</div>
                    }
                }
            }
            else
            {
                <ul class="fa-ul">
                    <li><i class="fa fa-calendar fa-li"></i>Angemeldet am: @Model.Thesis.IssueDate.Value.Date.ToShortDateString()</li>
                    <li><i class="fa fa-calendar fa-li"></i>Abgegeben am: @Model.Thesis.DeliveryDate.Value.Date.ToShortDateString()</li>
                    @if (Model.Thesis.GradeDate != null)
                    {
                        <li><i class="fa fa-calendar fa-li"></i>Note gemeldet am: @Model.Thesis.GradeDate.Value.Date.ToShortDateString()</li>
                    }
                </ul>
            }
        }
        else
        {
            <h4><i class="fas @mediaStyle"></i> Arbeit anmelden</h4>
            if (hasSupervisor && hasTitle)
            {
                <a href="@Url.Action("Issue")" class="btn btn-outline-primary">Anmelden</a>
            }
            else
            {
                if (!hasSupervisor)
                {
                    <p>Anmeldung erst dann möglich, wenn BetreuerIn zugesagt hat.</p>

                }
                if (!hasTitle)
                {
                    <p>Anmeldung erst dann möglich, wenn das Thema festgelegt wurde.</p>
                }
            }

        }
    </div>
}
</div>
</div>
</div>
</div>



