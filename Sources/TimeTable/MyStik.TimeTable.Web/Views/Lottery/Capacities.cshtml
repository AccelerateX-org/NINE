@model MyStik.TimeTable.DataServices.Lottery.DrawingService

@{
    ViewBag.Title = "Platzverlosung für " + Model.Lottery.Name;

}


@section styles
{
    <link href="@Url.Content("~/Assets/libs/datatables/dataTables.min.css")" rel="stylesheet" type="text/css" />
}


@section scripts
{
    <script src="@Url.Content("~/Assets/libs/datatables/dataTables.min.js")" type="text/javascript"></script>

    <script>
        $(document).ready(function () {
            var t = $('#tabPots').DataTable({
                "paging": false,
            });
        });
    </script>
}


<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h4>Wahlverfahren: "@Model.Lottery.Name" - Platzkapazitäten</h4>
                @if (!Model.Lottery.IsActive)
                {
                    <div class="alert alert-danger">Für Studierende nicht sichtbar</div>
                }
            </div>
            <div class="list-group">
                <div class="list-group-item">
                    <div class="btn-group" role="group">
                        <a href="@Url.Action("Details", new {id=Model.Lottery.Id})" class="btn btn-outline-primary"><i class="bi bi-chevron-left"></i> zurück</a>
                    </div>
                </div>
                <div class="list-group-item">
                    <h4>Legende</h4>
                    <p>Angaben bei den Studiengängen ist jeweils die Anzahl an noch verfügbaren Plätzen (positive Werte).</p>
                </div>

            </div>
            <table id="tabPots" class="table">
                @{
                    var nCapa = Model.Curricula.Count() + 1;
                }
                <thead>
                <tr>
                    <th colspan="2">Lehrveranstaltung</th>
                    <th colspan="@nCapa">Freie Plätze nach Studiengängen</th>
                    <th colspan="4">Auswertungen auf Ebene Lehrveranstaltung</th>
                </tr>
                <tr>
                    <th>Bezeichnung</th>
                    <th>Kürzel</th>
                    @foreach (var c in Model.Curricula)
                    {
                        <th>@c.ShortName</th>
                    }
                    <th>Offene Liste</th>
                    <th>Kapazität</th>
                    <th>Belegt</th>
                    <th>Warteliste</th>
                    <th>Auslastung</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var course in Model.Courses)
                {
                    var cap = 0;
                    var isInfinity = false;
                    var tn = course.Occurrence.Subscriptions.Count(x => !x.OnWaitingList);
                    var wl = course.Occurrence.Subscriptions.Count(x => x.OnWaitingList);
                    var total = tn + wl;

                    var openPot = Model.LotPots.FirstOrDefault(x => x.Course.Id == course.Id && !x.BookingList.Curricula.Any() && !x.BookingList.IsLost);
                    var lostPot = Model.LotPots.FirstOrDefault(x => x.Course.Id == course.Id && !x.BookingList.Curricula.Any() && x.BookingList.IsLost);

                    <tr>
                        <td>
                            <a href="@Url.Action("Details", "Course", new { id = course.Id })">@course.Name</a>
                        </td>
                        <td>
                            <a href="@Url.Action("Details", "Course", new { id = course.Id })">@course.ShortName</a>
                        </td>
                        @foreach (var c in Model.Curricula)
                        {
                            var pot = Model.LotPots.FirstOrDefault(x => x.Course.Id == course.Id && x.BookingList.Curricula.Contains(c));

                            if (pot != null)
                            {
                                if (pot.Capacity == int.MaxValue)
                                {
                                    isInfinity = true;
                                    <td><i class="bi bi-infinity"></i></td>
                                }
                                else
                                {
                                    cap += pot.Capacity;
                                    var free = pot.SeatsAvailable - pot.Lots.Count;
                                    if (cap > 0)
                                    {
                                        <td>@free von @pot.Capacity</td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }

                                }
                            }
                            else
                            {
                                <td></td>
                            }
                        }
                        @if (openPot != null)
                        {
                            if (openPot.Capacity == int.MaxValue)
                            {
                                isInfinity = true;
                                <td><i class="bi bi-infinity"></i></td>
                            }
                            else
                            {
                                cap += openPot.Capacity;
                                var free = openPot.SeatsAvailable - openPot.Lots.Count;
                                if (cap > 0)
                                {
                                    <td>@free von @openPot.Capacity</td>
                                }
                                else
                                {
                                    <td></td>
                                }
                            }
                        }
                        else
                        {
                            <td>0</td>
                        }

                        @if (isInfinity)
                        {
                            <td><i class="bi bi-infinity"></i></td>
                        }
                        else
                        {
                            <td>@cap</td>
                        }
                        <td>@tn</td>
                        <td>@wl</td>
                        @if (lostPot != null)
                        {
                            <td>@lostPot.BookingList.Bookings.Count Einträge ohne Zuordnung zu einem Kontingent</td>
                        }
                        else
                        {
                            if (isInfinity)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td>@string.Format("{0:0%}", (total / (double)(cap)))</td>
                            }
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>


