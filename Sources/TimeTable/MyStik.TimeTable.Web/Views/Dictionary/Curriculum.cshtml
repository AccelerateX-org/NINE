@using MyStik.TimeTable.Data
@model MyStik.TimeTable.Web.Models.SemesterActiveViewModel
@{
    var containerType = "container-fluid";
    if (!Request.IsAuthenticated)
    {
        Layout = "~/Views/Shared/_LayoutDashboardNew.cshtml";
        containerType = "container";
    }


    var db = new TimeTableDbContext();

    ViewBag.Title = "Vorlesungsverzeichnis";
}



<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h4>
                    <a href="@Url.Action("Index")">Vorlesungsverzeichnis</a> /
                    <a href="@Url.Action("Semester", new { semId = Model.Semester.Id })">@Model.Semester.Name</a> /
                    <a href="@Url.Action("Organiser", new { semId = Model.Semester.Id, orgId = Model.Organiser.Id })">@Model.Organiser.ShortName</a> /
                    @Model.Curriculum.ShortName
                </h4>
            </div>
            <div class="list-group">
                @foreach (var group in Model.Curriculum.CurriculumGroups.OrderBy(x => x.Name))
                {
                    foreach (var capGroup in group.CapacityGroups.OrderBy(x => x.Name))
                    {
                        if (capGroup.SemesterGroups.Any(x => x.Semester.Id == Model.Semester.Id))
                        {
                            <a href="@Url.Action("Group", new {semId = Model.Semester.Id, groupId = capGroup.Id})" class="list-group-item">
                                <h5 class="list-group-item-heading">@capGroup.FullName</h5>
                            </a>
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>

@if (Model.Curriculum.Areas.Any())
{
    <div class="row mt-5">
        <div class="col-md-12">
            <div class="card">
                <div class="list-group">

                    @{
                        var allSlots = db.CurriculumSlots.Where(x =>
                            x.AreaOption != null && x.AreaOption.Area.Curriculum.Id == Model.Curriculum.Id).ToList();

                        var minSem = allSlots.Min(x => x.Semester);
                        var maxSem = allSlots.Max(x => x.Semester);

                        var allOptions = db.AreaOptions.Where(x => x.Area.Curriculum.Id == Model.Curriculum.Id).ToList();

                        for (var s = minSem; s <= maxSem; s++)
                        {
                            var semSlots = allSlots.Where(x => x.Semester == s).ToList();

                            var optionSet = semSlots.Select(x => x.AreaOption).Distinct().ToList();

                            <div class="list-group-item list-group-item-action">
                                <h5>Semester @s</h5>
                                <div>
                                    @foreach (var opt in optionSet)
                                    {
                                        <span><a href="@Url.Action("Slot", new { currId = Model.Curriculum.Id, semId = Model.Semester.Id, sem = s, optionId = opt.Id })">@opt.Area.Tag::@opt.Tag</a> |</span>
                                    }
                                </div>
                            </div>
                        }
                    }
                    <a class="list-group-item list-group-item-action" href="@Url.Action("Planer", new {currId=Model.Curriculum.Id, semId=Model.Semester.Id})">Planer</a>
                </div>
            </div>
        </div>
    </div>
}